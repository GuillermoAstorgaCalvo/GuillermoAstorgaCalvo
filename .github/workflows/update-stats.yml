name: Update Statistics

on:
  workflow_dispatch: # puedes lanzarlo manualmente
  schedule:
    - cron: "0 3 * * 1" # cada lunes a las 3:00 AM UTC (opcional)

jobs:
  update-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout perfil p√∫blico
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Instalar dependencias
        run: |
          python3 -m pip install --upgrade pip
          pip install git-fame pandas

      - name: Clonar repositorios privados
        env:
          TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          # Clonar repositorios desde la rama develop
          git clone --branch develop https://x-access-token:${TOKEN}@github.com/guillermo-affiliaction/housing-hub-saas.git repo1
          git clone --branch develop https://x-access-token:${TOKEN}@github.com/guillermo-affiliaction/backend-housing-hub-saas.git repo2
          git clone --branch develop https://x-access-token:${TOKEN}@github.com/guillermo-affiliaction/IAbackend-inmoIA.git repo3

      - name: Generar estad√≠sticas unificadas
        run: |
          cat > process_stats.py << 'EOF'
          import json
          import re
          import os
          from pathlib import Path

          def get_git_fame_json(repo_path):
              """Get git fame data as JSON from a repository"""
              os.chdir(repo_path)
              import subprocess
              result = subprocess.run(['git', 'fame', '--format', 'json'], 
                                    capture_output=True, text=True)
              os.chdir('..')
              return json.loads(result.stdout) if result.returncode == 0 else None

          def unify_guillermo_stats(repos_data):
              """Unify stats for all Guillermo variants"""
              unified_stats = {
                  'total_commits': 0,
                  'total_files': 0,
                  'total_loc': 0,
                  'repos_processed': 0,
                  'guillermo_unified': {
                      'loc': 0,
                      'commits': 0,
                      'files': 0
                  },
                  'repo_breakdown': {}
              }
              
              # Patterns to identify Guillermo variants
              guillermo_patterns = [
                  r'guillermo.*affiliaction',
                  r'Guillermo.*Affiliaction'
              ]
              
              # Patterns to identify bots (exclude from totals)
              bot_patterns = [
                  r'.*\[bot\]$',
                  r'gpt-engineer-app.*'
              ]
              
              # Repo name mapping
              repo_names = {
                  'repo1': 'InmoIA Frontend',
                  'repo2': 'Typescript Backend', 
                  'repo3': 'Python AI MCP Backend'
              }
              
              for repo_name, data in repos_data.items():
                  if not data:
                      continue
                      
                  display_name = repo_names.get(repo_name, repo_name)
                  unified_stats['repos_processed'] += 1
                  
                  # Initialize repo breakdown
                  unified_stats['repo_breakdown'][display_name] = {
                      'guillermo_stats': {'loc': 0, 'commits': 0, 'files': 0}
                  }
                  
                  for author_data in data.get('data', []):
                      # Handle different git fame JSON formats
                      if isinstance(author_data, dict):
                          author_name = author_data.get('author', '')
                          loc = author_data.get('loc', 0)
                          commits = author_data.get('commits', 0)
                          files = author_data.get('files', 0)
                      elif isinstance(author_data, list) and len(author_data) >= 4:
                          # Format: [author, loc, commits, files, ...]
                          author_name = author_data[0] if len(author_data) > 0 else ''
                          loc = int(author_data[1]) if len(author_data) > 1 and str(author_data[1]).isdigit() else 0
                          commits = int(author_data[2]) if len(author_data) > 2 and str(author_data[2]).isdigit() else 0
                          files = int(author_data[3]) if len(author_data) > 3 and str(author_data[3]).isdigit() else 0
                      else:
                          continue  # Skip invalid data
                      
                      # Check if this is a bot (exclude from totals)
                      is_bot = any(re.search(pattern, str(author_name), re.IGNORECASE) 
                                 for pattern in bot_patterns)
                      
                      # Check if this is a Guillermo variant
                      is_guillermo = any(re.search(pattern, str(author_name), re.IGNORECASE) 
                                       for pattern in guillermo_patterns)
                      
                      # Add to totals (all human contributors, including Guillermo)
                      if not is_bot:
                          unified_stats['total_loc'] += loc
                          unified_stats['total_commits'] += commits
                          unified_stats['total_files'] += files
                      
                      if is_guillermo:
                          # Add to unified Guillermo stats
                          unified_stats['guillermo_unified']['loc'] += loc
                          unified_stats['guillermo_unified']['commits'] += commits
                          unified_stats['guillermo_unified']['files'] += files
                          
                          # Add to per-repo Guillermo stats
                          unified_stats['repo_breakdown'][display_name]['guillermo_stats']['loc'] += loc
                          unified_stats['repo_breakdown'][display_name]['guillermo_stats']['commits'] += commits
                          unified_stats['repo_breakdown'][display_name]['guillermo_stats']['files'] += files
              
              return unified_stats

          def generate_markdown_report(stats):
              """Generate markdown report from unified stats"""
              report = "# üìä Estad√≠sticas Unificadas de C√≥digo\n\n"
              report += f"*√öltima actualizaci√≥n: $(date)*\n\n"
              
              report += "## üîç Resumen Global\n\n"
              report += f"- **Repositorios procesados:** {stats['repos_processed']}\n"
              report += f"- **Total commits:** {stats['total_commits']:,} *(todos los contribuidores humanos)*\n"
              report += f"- **Total archivos:** {stats['total_files']:,} *(todos los contribuidores humanos)*\n"
              report += f"- **Total l√≠neas de c√≥digo:** {stats['total_loc']:,} *(todos los contribuidores humanos)*\n\n"
              
              # Calculate Guillermo's percentages against all human contributors
              guillermo = stats['guillermo_unified']
              if stats['total_loc'] > 0:
                  loc_pct = (guillermo['loc'] / stats['total_loc']) * 100
                  commits_pct = (guillermo['commits'] / stats['total_commits']) * 100
                  files_pct = (guillermo['files'] / stats['total_files']) * 100
              else:
                  loc_pct = commits_pct = files_pct = 0
              
              report += "## üë®‚Äçüíª Contribuciones por Repositorio y Autor\n\n"
              report += "| Repositorio | Autor | L√≠neas | Commits | Archivos | Distribuci√≥n |\n"
              report += "|:------------|:------|-------:|--------:|---------:|:-------------|\n"
              
              # Summary row - Total across all repos
              report += f"| **üåü TOTAL UNIFICADO** | **Guillermo** | **{guillermo['loc']:,}** | **{guillermo['commits']:,}** | **{guillermo['files']:,}** | **{loc_pct:.1f}/{commits_pct:.1f}/{files_pct:.1f}** |\n"
              report += "| | | | | | |\n"  # Empty row for separation
              
              # Per-repository breakdown for Guillermo
              for repo_name, repo_data in stats['repo_breakdown'].items():
                  g_stats = repo_data['guillermo_stats']
                  # Calculate each repo's percentage of total project (all human contributors)
                  if stats['total_loc'] > 0:
                      repo_loc_pct = (g_stats['loc'] / stats['total_loc']) * 100
                      repo_commits_pct = (g_stats['commits'] / stats['total_commits']) * 100
                      repo_files_pct = (g_stats['files'] / stats['total_files']) * 100
                  else:
                      repo_loc_pct = repo_commits_pct = repo_files_pct = 0
                      
                  report += f"| üìÅ **{repo_name}** | Guillermo | {g_stats['loc']:,} | {g_stats['commits']:,} | {g_stats['files']:,} | {repo_loc_pct:.1f}/{repo_commits_pct:.1f}/{repo_files_pct:.1f} |\n"

              
              report += "\n---\n"
              report += "*Generado autom√°ticamente por GitHub Actions*"
              
              return report

          # Main execution
          repos_data = {}

          # Process each repository
          for repo in ['repo1', 'repo2', 'repo3']:
              if Path(repo).exists():
                  print(f"Processing {repo}...")
                  repos_data[repo] = get_git_fame_json(repo)
              else:
                  print(f"Repository {repo} not found, skipping...")

          # Generate unified stats
          unified_stats = unify_guillermo_stats(repos_data)

          # Generate markdown report
          markdown_report = generate_markdown_report(unified_stats)

          # Save report
          with open('STATS.md', 'w', encoding='utf-8') as f:
              f.write(markdown_report)

          print("‚úÖ Unified stats generated successfully!")
          print(f"üìä Guillermo total: {unified_stats['guillermo_unified']['loc']:,} LOC across {unified_stats['repos_processed']} repos")
          EOF

          python3 process_stats.py

      - name: A√±adir resultados al perfil
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add STATS.md
          git commit -m "üìä Actualiza estad√≠sticas unificadas de Guillermo" || echo "Sin cambios"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push
